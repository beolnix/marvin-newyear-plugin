apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'maven'

def CLASS_ACTIVATOR = 'com.beolnix.marvin.im.plugin.Activator'
def CLASS_PLUGIN = 'com.beolnix.marvin.im.plugin.NewYearIMPlugin'
def BUNDLE_NAME = 'New Year plugin'
def BUNDLE_DESC = 'backward counting to new years celebration'
def VENDOR = 'com.beolnix'

def JDK_VERSION = '1.8'
def MARVIN_API_VERSION = '0.2-SNAPSHOT'
def MARVIN_UTILS_VERSION = '0.2-SNAPSHOT'
def LOG4J_VERSION = '1.2.16'
def FELIX_VERSION = '4.0.1'
def GROOVY_VERSION = '2.4.4'
def JUNIT_VERSION = '4.12'
def XML_APIS_VERSION = '1.3.04'

sourceCompatibility = JDK_VERSION
targetCompatibility = JDK_VERSION
System.setProperty("file.encoding", "UTF-8")

project.group = 'com.beolnix.marvin'
project.version = '0.2-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "http://nexus.beolnix.com/content/repositories/releases/"
    }
    maven {
        url "http://nexus.beolnix.com/content/repositories/snapshots/"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (version.toString().endsWith("SNAPSHOT")) {
                repository(url: "http://nexus.beolnix.com/content/repositories/snapshots/") {
                    authentication(userName: System.getenv()['REPO_USER'], password: System.getenv()['REPO_SNAPSHOT_PASSWORD'])
                }
            } else {
                repository(url: "http://nexus.beolnix.com/content/repositories/releases/") {
                    authentication(userName: System.getenv()['REPO_USER'], password: System.getenv()['REPO_RELEASE_PASSWORD'])
                }
            }
            pom.version = version
            pom.artifactId = "marvin-newyear-plugin"
            pom.groupId = "com.beolnix.marvin"
        }
    }
}

configurations { provided }

sourceSets {
    main { compileClasspath += configurations.provided }
}


dependencies {    
    compile group: 'com.beolnix.marvin', name: 'marvin-api', version: MARVIN_API_VERSION, changing: true
    compile group: 'com.beolnix.marvin', name: 'marvin-plugin-utils', version: MARVIN_UTILS_VERSION, changing: true
    compile "org.apache.felix:org.apache.felix.framework:4.0.1"

    compile "org.codehaus.groovy:groovy-all:${GROOVY_VERSION}"
    compile 'xml-apis:xml-apis:${XML_APIS_VERSION}'

    compile "log4j:log4j:${LOG4J_VERSION}"

    testCompile "junit:junit:${JUNIT_VERSION}"
}

jar {
    def cp = '.'
    configurations.runtime.resolve().flatten() { File file
        -> file.name
    }.unique().each { aJar ->  cp = cp + ",${aJar}" }

    manifest {
        attributes 'Bundle-Name': BUNDLE_NAME,
                'Bundle-SymbolicName': BUNDLE_NAME,
                'Bundle-Description': BUNDLE_DESC,
                'Bundle-Vendor': VENDOR,
                'Bundle-Version': project.version.toString().replace("-SNAPSHOT", ""),
                'Bundle-Activator': CLASS_ACTIVATOR,
                'Export-Package': CLASS_PLUGIN,
                'Import-Package': 'org.osgi.framework,com.beolnix.marvin.im.api,com.beolnix.marvin.im.api.model,com.beolnix.marvin.im.api.error,com.beolnix.marvin.plugins.api,com.beolnix.marvin.plugins.api.error,com.beolnix.marvin.config.api,com.beolnix.marvin.config.api.model,com.beolnix.marvin.config.api.error',
                'Bundle-ClassPath': cp
    }

    from configurations.runtime
}


